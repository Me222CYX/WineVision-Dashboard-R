llikelihoodValues
#
max(frogs$pres.abs)
simloglike <- function(x,x1,x2,x3,y.glm, N=1) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike))))
points(llikelihoodValues, pch=16, col=2)
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
max(frogs$pres.abs)
simloglike <- function(x,x1,x2,x3,y.glm, N=10) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike))))
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
max(frogs$pres.abs)
simloglike <- function(x,x1,x2,x3,y.glm, N=212) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike))))
boxplot(froglike, ylim=range(c(llikelihoodValues)))
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
max(frogs$pres.abs)
simloglike <- function(x,x1,x2,x3,y.glm, N=212) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
boxplot(froglike, ylim=range(c(llikelihoodValues)))
points(llikelihoodValues, pch=16, col=2)
simulate(frogs.glm)$sim_1
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=212) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
boxplot(froglike, ylim=range(c(llikelihoodValues)))
points(llikelihoodValues, pch=16, col=2)
boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike ))))
range(c(llikelihoodValues,range(froglike ))
range(c(llikelihoodValues,range(froglike )))
c(llikelihoodValues,range(froglike ))
max(c(llikelihoodValues,range(froglike )))
min(c(llikelihoodValues,range(froglike )))
c(llikelihoodValues,range(froglike ))
froglike
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=10) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike ))))
froglike
boxplot(froglike))
boxplot(froglike))
boxplot(froglike)
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=10) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
#boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike ))))
points(llikelihoodValues, pch=16, col=2)
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=10) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
#boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike ))))
boxplot(froglike)
points(llikelihoodValues, pch=16, col=2)
c(llikelihoodValues,range(froglike ))
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=212) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
froglike
par(mar=c(1, 4, .1, .1))
#boxplot(froglike, ylim=range(c(llikelihoodValues,range(froglike ))))
boxplot(froglike)
points(llikelihoodValues, pch=16, col=2)
frogs.glm <- glm(pres.abs~log(distance)+log(NoOfPools)+meanmin+meanmax, family =binomial(link = "logit"),data=frogs)
llikelihoodValues <-log(dbinom(frogs$pres.abs, siz =212, prob=fitted(frogs.glm)))
llikelihoodValues
#
simloglike <- function(x,x1,x2,x3,y.glm, N=212) {
ll <- matrix(0, ncol=length(x), nrow=N)
for (j in 1:N) {
y <- simulate(y.glm)$sim_1
sim.glm <- glm(y~ x+x1+x2+x3,family = binomial(link ="logit"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
d <- coef(sim.glm)[4]
e <- coef(sim.glm)[5]
loglikelihoodValues <-log(dbinom(y, size = 212, prob =  exp(a + b*x+c*x1+d*x2+e*x3)/(1 + exp(a + b*x+c*x1+d*x2+e*x3))))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x) names(ll) <- ""
ll
}
#
froglike <- with(frogs, simloglike(log(distance),log(NoOfPools),meanmin,meanmax,frogs.glm))
par(mar=c(1, 4, .1, .1))
boxplot(froglike)
points(llikelihoodValues, pch=16, col=2)
ACF.qpoisson<-glm(ACF.Total~ T + INJ ,data = sect6data, family=quasipoisson)
summary(ACF.qpoisson)
# nagative binomial
suppressMessages(library(MASS))
ACF.nb <- glm.nb(ACF.Total~ T + INJ,data = sect6data)
summary(ACF.nb)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
setwd("~/Desktop/MDS/data551/dashboard-project---r-data551_group8")
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
setwd("~/Desktop/MDS/data551/dashboard-project---r-data551_group8")
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
library(readr)
wine_quality <- read_csv("data/processed_python/wine_quality.csv")
View(wine_quality)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
head(wine)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
variables <- colnames(subset(wine, select = -c(Wine, Quality.Factor, Quality.Factor.Numeric)))
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
variables <- colnames(subset(wine, select = -c(Wine, Quality.Factor, Quality.Factor.Numeric)))
variables <- colnames(subset(wine, select = -c(Wine, `Quality Factor`,`Quality Factor Numeric`)))
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
plot_ly(tree)
## I cant figure out how to regenerate the png image in a callback##
## Can't embed a graph because this tree package doesn't work with plotly##
app$callback(
output("treepng", "src"),
params = list(input("winetype", "value"),
input("variable-select", "value")),
function(winetype, tree.variables){
# Subset to our desired winetype
winex <- subset(wine, Wine == winetype)
# Create subset df using only Quality.Factor and our chosen predictor variables
preds <- wine[tree.variables]
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
# Create tree object using chosen predictors
wine.tree <- tree(Quality.Factor~., data = winex)
# If the tree is a single node tree (no splits) we get an error when we try to plot it
if(wine.tree$frame$splits[1] == ""){
return("information.jpeg")
} else {
plot_ly(tree)
# plottree <- function(tree){
#   plot(tree)
#   text(tree)}
# png(filename = "tree.png", width = 500, height = 500)
# plottree(wine.tree)
# dev.off()
}
}
)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
winex <- subset(wine, Wine == "red")
# Create subset df using only Quality.Factor and our chosen predictor variables
preds <- wine[tree.variables]
# Create subset df using only Quality.Factor and our chosen predictor variables
tree.variables<-c("pH",'Alcohol")
preds <- wine[tree.variables]
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
# Create tree object using chosen predictors
wine.tree <- tree(Quality.Factor~., data = winex)
########33
app = Dash$new(external_stylesheets = dbcThemes$BOOTSTRAP)
app$layout(dbcContainer(
dbcRow(
dbcCol(list( # Variable selection
htmlH5("Physiochemical Properties"),
dccDropdown(id = "variables",
options = colnames(wine)[2:12] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col))),
value = c(3,9, 12),
multi = T),
htmlH5("Wine Type"),
dccRadioItems(id = "winetype",
options = list(
list("label" = "White Wines", "value" = "white"),
list("label" = "Red Wines", "value" = "red")
),
value="red"
),
dccGraph(
id = "treepng")
))
)
))
## I cant figure out how to regenerate the png image in a callback##
## Can't embed a graph because this tree package doesn't work with plotly##
app$callback(
output("treepng", "figure"),
params = list(input("winetype", "value"),
input("variable-select", "value")),
function(winetype, tree.variables){
# Subset to our desired winetype
winex <- subset(wine, Wine == winetype)
# Create subset df using only Quality.Factor and our chosen predictor variables
preds <- wine[tree.variables]
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
# Create tree object using chosen predictors
wine.tree <- tree(Quality.Factor~., data = winex)
# If the tree is a single node tree (no splits) we get an error when we try to plot it
if(wine.tree$frame$splits[1] == ""){
return("information.jpeg")
} else {
ggtree(tree)
# plottree <- function(tree){
#   plot(tree)
#   text(tree)}
# png(filename = "tree.png", width = 500, height = 500)
# plottree(wine.tree)
# dev.off()
}
}
)
app$run_server(debug = T)
# Create subset df using only Quality.Factor and our chosen predictor variables
tree.variables<-c("pH","Alcohol")
preds <- wine[tree.variables]
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
Q
# Create subset df using only Quality.Factor and our chosen predictor variables
tree.variables<-c("pH","Alcohol")
preds <- wine[tree.variables]
Quality.Factor <- as.factor(wine$Quality.Factor)
wine <-read_csv("data/processed_python/wine_quality.csv")
head(wine)
variables <- colnames(subset(wine, select = -c(Wine, `Quality Factor`,`Quality Factor Numeric`)))
variablesNoUnits <- gsub("\\..\\..*","", variables)
variablesNoUnits <- gsub("(..mg.dm)*","", variablesNoUnits)
variablesNoUnits <- gsub("\\.","", variablesNoUnits)
#######3
wine
library(readr)
wine_quality <- read_csv("data/processed_python/wine_quality.csv",
trim_ws = FALSE)
View(wine_quality)
head(wine_qualit)
head(wine_qualit)
library(readr)
wine_quality <- read_csv("data/processed_python/wine_quality.csv",
trim_ws = FALSE)
View(wine_quality)
head(wine_qualit)
head(wine_quality)
wine <- read.csv("data/processed/wine_quality.csv")
wine <- read.csv("data/raw/wine_quality.csv")
variables <- colnames(subset(wine, select = -c(Wine, Quality.Factor, Quality.Factor.Numeric)))
variablesNoUnits <- gsub("\\..\\..*","", variables)
variablesNoUnits <- gsub("(..mg.dm)*","", variablesNoUnits)
variablesNoUnits <- gsub("\\.","", variablesNoUnits)
head(wine_quality)
head(wine)
#######3
wine
winex <- subset(wine, Wine == "red")
# Create subset df using only Quality.Factor and our chosen predictor variables
tree.variables<-c("pH","Alcohol")
preds <- wine[tree.variables]
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
# Create tree object using chosen predictors
wine.tree <- tree(Quality.Factor~., data = winex)
wine.tree
text(wine.tree )
ggtree(wine.tree )
ggtree
library(ggtree)
install.packages("ggtree")
BiocManager::install("ggtree")
BiocManager::install("ggtree")
library(ggplot2)
ggtree(wine.tree )
ggtree
ggplot2::ggtree ggtree
library(ggtree)
library(tidyverse)
plot(wine.tree)
text(wine.tree )
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
))
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
wine <- read.csv("data/raw/wine_quality.csv")
variables <- colnames(subset(wine, select = -c(Wine, Quality.Factor, Quality.Factor.Numeric)))
variablesNoUnits <- gsub("\\..\\..*","", variables)
variablesNoUnits <- gsub("(..mg.dm)*","", variablesNoUnits)
wine
variables <- colnames(subset(wine, select = -c(Wine, Quality.Factor)))
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
Q
Q
Q
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
Q
Q
Q
Q
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
Q
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
Q
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
