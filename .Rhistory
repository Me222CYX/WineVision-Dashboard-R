winetype<-"red"
winex <- subset(wine, Wine == winetype)
winex
coln<-colnames(wine)[2:12]
names(coln)<-1:11
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
library(plotly)
print(tree.variables)
# Subset to our desired winetype
winex <- subset(wine, Wine == winetype)
coln<-colnames(wine)[2:12]
names(coln)<-1:11
coln[tree.variables]%>%as.vector()->sub
# Create subset df using only Quality.Factor and our chosen predictor variables
preds <- wine[sub]
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
# Create tree object using chosen predictors
wine.tree <- tree(Quality.Factor~., data = winex)
fitr <- dendro_data(wine.tree)
ggplotly()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
theme_dendro()
ggplotly()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
theme_dendro()
# Create tree object using chosen predictors
wine.tree <- tree(Quality.Factor~., data = winex)
wine.tree
ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
theme_dendro()
wine.tree
fitr <- dendro_data(wine.tree)
renderPlot({
ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
theme_dendro()
})
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
theme_dendro()
p
p
p
ggplotly(p)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
coln<-colnames(wine)[2:12]
names(coln)<-1:11
app$callback(
output("tree", "figure"),
params = list(input("winetype", "value"),
input("variable-select", "value")),
function(winetype, tree.variables){
print(tree.variables)
# Subset to our desired winetype
winex <- subset(wine, Wine == winetype)
coln<-colnames(wine)[2:12]
names(coln)<-1:11
coln[tree.variables]%>%as.vector()->sub
# Create subset df using only Quality.Factor and our chosen predictor variables
preds <- wine[sub]
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
# Create tree object using chosen predictors
wine.tree <- tree(Quality.Factor~., data = winex)
wine.tree
fitr <- dendro_data(wine.tree)
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
theme_dendro()
ggplotly(p)
return( ggplotly(p))
# ggplotly()+
#   geom_segment(data = fitr$segments,
#                aes(x = x, y = y, xend = xend, yend = yend)
#   ) +
#   geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
#   geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
#   theme_dendro()
# If the tree is a single node tree (no splits) we get an error when we try to plot it
# if(wine.tree$frame$splits[1] == ""){
# ggplot()+
#   geom_segment(data = fitr$segments,
#                aes(x = x, y = y, xend = xend, yend = yend)
#   ) +
#   geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
#   geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
#   theme_dendro()
#
# } else {
#   ggplot() +
#     geom_segment(data = fitr$segments,
#                  aes(x = x, y = y, xend = xend, yend = yend)
#     ) +
#     geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
#     geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
#     theme_dendro()
#
# }
}
)
ggplotly(p)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
# I cant figure out how to regenerate the png image in a callback##
# Can't embed a graph because this tree package doesn't work with plotly##
as.ggplot()
# I cant figure out how to regenerate the png image in a callback##
# Can't embed a graph because this tree package doesn't work with plotly##
as.ggplot()
install.packages("grid")
library("grid")
library("ggplotify")
install.packages("ggplotify")
library("ggplotify")
# I cant figure out how to regenerate the png image in a callback##
# Can't embed a graph because this tree package doesn't work with plotly##
as.ggplot
# I cant figure out how to regenerate the png image in a callback##
# Can't embed a graph because this tree package doesn't work with plotly##
plot(wine.tree)
as.ggplot(plot(wine.tree))
text(wine.tree)
# I cant figure out how to regenerate the png image in a callback##
# Can't embed a graph because this tree package doesn't work with plotly##
plot(wine.tree)
text(wine.tree)
as.ggplot(plot(wine.tree))
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = text(wine.tree))) +
theme_dendro()
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = text(wine.tree))) +
theme_dendro()
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = text(wine.tree))) +
theme_dendro()
p
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = text(wine.tree))) +
theme_dendro()
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = text(wine.tree))) +
theme_dendro()
p
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = text(wine.tree))) +
theme_dendro()
p
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = text(wine.tree))) +
theme_dendro()
p
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = wine.tree)) +
theme_dendro()
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = wine.tree)) +
theme_dendro()
p
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = wine.tree$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = wine.tree)) +
theme_dendro()
p
fitr$labels
autoplot(mod, branch=0
plot <- ggplotly(plot)
plot <- plot %>% layout(
paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)',
legend = list(title=list(text='<b> Quality Levels </b>\n'), x = 0.82, y = 1, itemwidth = 40, tracegroupgap = 12, bgcolor = 'rgba(0,0,0,0)'),
autosize = FALSE)#,
#width = 1100, height = 500)
plot
# ggplotly()+
#   geom_segment(data = fitr$segments,
#                aes(x = x, y = y, xend = xend, yend = yend)
#   ) +
#   geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
#   geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
#   theme_dendro()
# If the tree is a single node tree (no splits) we get an error when we try to plot it
# if(wine.tree$frame$splits[1] == ""){
# ggplot()+
#   geom_segment(data = fitr$segments,
#                aes(x = x, y = y, xend = xend, yend = yend)
#   ) +
#   geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
#   geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
#   theme_dendro()
#
# } else {
#   ggplot() +
#     geom_segment(data = fitr$segments,
#                  aes(x = x, y = y, xend = xend, yend = yend)
#     ) +
#     geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
#     geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
#     theme_dendro()
#
# }
}
)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
coln["3"]
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
if (require(rpart)) {
require(ggplot2)
fit <- rpart(Kyphosis ~ Age + Number + Start, method = "class",
data = kyphosis)
fitr <- dendro_data(fit)
ggplot() +
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
theme_dendro()
}
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
setwd("~/Desktop/MDS/data551/dashboard-project---r-data551_group8")
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
colnames(wine)[2:12] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
app$layout( dbcContainer(
dbcRow(
dbcCol(list( # Variable selection
htmlH5("Physiochemical Properties"),
dccDropdown(id = "variable-select",
options = colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col))),
value = c(3,9, 11),
multi = T),
htmlH5("Wine Type"),
dccRadioItems(id = "winetype",
options = list(
list("label" = "White Wines", "value" = "white"),
list("label" = "Red Wines", "value" = "red")
),
value="red"
),
htmlDiv(list(dccGraph(id = "tree")))
))
)
))
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
coln
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
names(coln)<-2:112
coln<-colnames(wine)[2:12]
coln
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
coln
names(coln)<-2:11
coln
coln<-colnames(wine)[2:11]
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
coln<-colnames(wine)[2:11]
names(coln)<-2:11
coln
wine[11]
head(wine[11])
colnames(wine)[2:11]
app$layout( dbcContainer(
dbcRow(
dbcCol(list( # Variable selection
htmlH5("Physiochemical Properties"),
dccDropdown(id = "variable-select",
options = colnames(wine)[2:12] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col))),
value = c(3,9, 11),
multi = T),
htmlH5("Wine Type"),
dccRadioItems(id = "winetype",
options = list(
list("label" = "White Wines", "value" = "white"),
list("label" = "Red Wines", "value" = "red")
),
value="red"
),
htmlDiv(list(dccGraph(id = "tree")))
))
)
))
colnames(wine)[2:12]
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
coln<-colnames(wine)[2:11]
names(coln)<-2:11
coln
coln[11]
coln[1]
coln[12]
coln[9]
coln[10]
names(coln)<-1:10
coln[10]
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
# coln<-colnames(wine)[2:11]
# names(coln)<-2:10
colnames(wine)[2:12] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
# coln<-colnames(wine)[2:11]
# names(coln)<-2:10
colnames(wine)[2:12] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
names(coln)<-1:10
coln[10]
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
coln[c(3,9,10)]
coln[c(3,9,10)]]%>%as.vector()
coln[c(3,9,10)]]%>%as.vector()
coln[c(3,9,10)]%>%as.vector()
coln[c(3,9,10)]%>%as.vector()->sub
# Create subset df using only Quality.Factor and our chosen predictor variables
preds <- wine[sub]
wine
wine%>%head()
wine%>%head()
sub
wine%>%select(sub)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col))),
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
coln<-colnames(wine)[2:11]
names(coln)<-2:11
coln
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
names(coln)<-2:11
coln<-colnames(wine)[2:11]
names(coln)<-2:11
coln[10
coln[tree.variables]%>%as.vector()->sub
# Create subset df using only Quality.Factor and our chosen predictor variables
preds <- wine%>%select(sub)
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
# Create tree object using chosen predictors
wine.tree <- rpart(Quality.Factor~., data = winex)
fitr <- dendro_data(wine.tree)
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
theme_dendro()
plot <- ggplotly(p)
plot <- plot %>% layout(
paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)')
plot
}
)
app$run_server(debug = F)
coln[10]
coln[10]
# coln<-colnames(wine)[2:11]
# names(coln)<-2:10
app$callback(
output("tree", "figure"),
params = list(input("winetype", "value"),
input("variable-select", "value")),
function(winetype, tree.variables){
winetype<-unlist(winetype)
tree.variables<-unlist(tree.variables)
# Subset to our desired winetype
winex <- subset(wine, Wine == winetype)
coln<-colnames(wine)[2:11]
names(coln)<-2:11
coln[10}
coln[tree.variables]%>%as.vector()->sub
# Create subset df using only Quality.Factor and our chosen predictor variables
preds <- wine%>%select(sub)
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
# Create tree object using chosen predictors
wine.tree <- rpart(Quality.Factor~., data = winex)
fitr <- dendro_data(wine.tree)
p<-ggplot()+
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)
) +
geom_text(data = fitr$labels, aes(x = x, y = y, label = label)) +
geom_text(data = fitr$leaf_labels, aes(x = x, y = y, label = label)) +
theme_dendro()
plot <- ggplotly(p)
plot <- plot %>% layout(
paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)')
plot
}
)
app$run_server(debug = F)
coln[10]
colnames(wine)[2:11] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col)))
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
debugSource('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
Quality.Factor <- as.factor(wine$Quality.Factor)
Quality.Factor <- as.factor(wine$Quality.Factor)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/reports/CARTS.R', echo=TRUE)
source('~/Desktop/MDS/data551/dashboard-project---r-data551_group8/app.r', echo=TRUE)
