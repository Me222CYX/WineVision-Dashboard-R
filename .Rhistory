ggtitle("Average Housing Costs in the Central Okanagan") +
geom_text(data = filter(okHouses, Date == max(Date)),
aes(label = HouseType),
hjust = 0, nudge_x = 0.1) +
coord_cartesian(clip = 'off') +
theme(legend.position = 'none',
plot.margin = margin(0.1, 2.6, 0.1, 0.1, "cm")) +
scale_color_brewer(palete = "Dark2")
# Housing prices over time in the Okanagan
housetypegraph <- okHouses %>% ggplot(aes(x = Date, y = AverageCost, color = HouseType)) +
geom_line() + theme_classic()+ scale_y_continuous(labels = scales::comma) +
ylab("Average Housing Cost") +
ggtitle("Average Housing Costs in the Central Okanagan") +
geom_text(data = filter(okHouses, Date == max(Date)),
aes(label = HouseType),
hjust = 0, nudge_x = 0.1) +
coord_cartesian(clip = 'off') +
theme(legend.position = 'none',
plot.margin = margin(0.1, 2.6, 0.1, 0.1, "cm")) +
scale_color_brewer(palette = "Dark2")
housetypegraph
cities <- read.csv("AverageHousingBetweenCities.csv")
# Tidy Data
cities <- cities %>% gather(key = "City", value = "AverageCost", -Date)
cities$Date <- my(str_to_lower(cities$Date))
citygraph <- cities %>% ggplot(aes(x = Date, y = AverageCost, color = City)) +
geom_line() + theme_classic() + scale_y_continuous(labels = scales::comma) +
geom_text(data = filter(cities, Date == max(Date)),
aes(label = City),
hjust = 0, nudge_x = 0.1) +
coord_cartesian(clip = 'off') +
theme(legend.position = 'none',
plot.margin = margin(0.1, 2.6, 0.1, 0.1, "cm")) +
scale_color_brewer(palette = "Dark2")
citygraph
hoods <- read.csv("NeighborhoodData.csv")
hoods <- plyr::arrange(hoods, Neighborhood) #Alphabetical order
# I saved NA as 0 when inputting data in excel because I forgot what excel NA is
hoods$AveragePrice[hoods$AveragePrice == 0] <- NA
hoodsgraph <- hoods %>% ggplot(aes(y = reorder(Neighborhood, AveragePrice),
x = AveragePrice, fill = HousingType)) +
geom_bar(stat = "identity", position = "dodge2", color = "gray") +
ylab("Neighborhood") + xlab("Average Selling Price") +
ggtitle("Average Selling Price in Central Okanagan Neighborhoods",
subtitle = "Data from February 2021") + theme_classic() +
scale_color_brewer(palette = "Dark2")
hoodsgraph
hoods <- read.csv("NeighborhoodData.csv")
hoods <- plyr::arrange(hoods, Neighborhood) #Alphabetical order
# I saved NA as 0 when inputting data in excel because I forgot what excel NA is
hoods$AveragePrice[hoods$AveragePrice == 0] <- NA
hoodsgraph <- hoods %>% ggplot(aes(y = reorder(Neighborhood, AveragePrice),
x = AveragePrice, fill = HousingType)) +
geom_bar(stat = "identity", position = "dodge2", color = "gray") +
ylab("Neighborhood") + xlab("Average Selling Price") +
ggtitle("Average Selling Price in Central Okanagan Neighborhoods",
subtitle = "Data from February 2021") + theme_classic() +
scale_fill_brewer(palette = "Dark2")
hoodsgraph
setwd("../..")
setwd("552/lab-2-EBAX1")
?ggsave
ggsave("housetypegraph.png",housetypegraph )
ggsave("hoodsgraph.png",hoodsgraph )
ggsave("citygraph.png",citygraph )
cities <- read.csv("AverageHousingBetweenCities.csv")
# Tidy Data
cities <- cities %>% gather(key = "City", value = "AverageCost", -Date)
cities$Date <- my(str_to_lower(cities$Date))
citygraph <- cities %>% ggplot(aes(x = Date, y = AverageCost, color = City)) +
geom_line() + theme_classic() + scale_y_continuous(labels = scales::comma) +
geom_text(data = filter(cities, Date == max(Date)),
aes(label = City),
hjust = 0, nudge_x = 0.1) +
coord_cartesian(clip = 'off') +
theme(legend.position = 'none',
plot.margin = margin(0.1, 2.6, 0.1, 0.1, "cm")) +
scale_color_brewer(palette = "Dark2") +
ggtitle("Average Housing Prices in Canadian Cities")
citygraph
ggsave("citygraph.png",citygraph )
hoods <- read.csv("NeighborhoodData.csv")
hoods <- plyr::arrange(hoods, Neighborhood) #Alphabetical order
# I saved NA as 0 when inputting data in excel because I forgot what excel NA is
hoods$AveragePrice[hoods$AveragePrice == 0] <- NA
hoodsgraph <- hoods %>% ggplot(aes(y = reorder(Neighborhood, AveragePrice),
x = AveragePrice, fill = HousingType)) +
geom_bar(stat = "identity", position = "dodge2", color = "gray") +
ylab("Neighborhood") + xlab("Average Selling Price") +
ggtitle("Average Selling Price in Central Okanagan Neighborhoods",
subtitle = "Data from February 2021") + theme_classic() +
scale_fill_brewer(palette = "Dark2")
hoodsgraph
ggsave("hoodsgraph.png",hoodsgraph )
cities <- read.csv("AverageHousingBetweenCities.csv")
# Tidy Data
cities <- cities %>% gather(key = "City", value = "AverageCost", -Date)
cities$Date <- my(str_to_lower(cities$Date))
citygraph <- cities %>% ggplot(aes(x = Date, y = AverageCost, color = City)) +
geom_line() + theme_classic() + scale_y_continuous(labels = scales::comma) +
geom_text(data = filter(cities, Date == max(Date)),
aes(label = City),
hjust = 0, nudge_x = 0.1) +
coord_cartesian(clip = 'off') +
theme(legend.position = 'none',
plot.margin = margin(0.1, 2.6, 0.1, 0.1, "cm")) +
scale_color_brewer(palette = "Dark2") +
ggtitle("Average Housing Prices in Canadian Cities") +
xlab("Average Housing Costs")
citygraph
cities <- read.csv("AverageHousingBetweenCities.csv")
# Tidy Data
cities <- cities %>% gather(key = "City", value = "AverageCost", -Date)
cities$Date <- my(str_to_lower(cities$Date))
citygraph <- cities %>% ggplot(aes(x = Date, y = AverageCost, color = City)) +
geom_line() + theme_classic() + scale_y_continuous(labels = scales::comma) +
geom_text(data = filter(cities, Date == max(Date)),
aes(label = City),
hjust = 0, nudge_x = 0.1) +
coord_cartesian(clip = 'off') +
theme(legend.position = 'none',
plot.margin = margin(0.1, 2.6, 0.1, 0.1, "cm")) +
scale_color_brewer(palette = "Dark2") +
ggtitle("Average Housing Prices in Canadian Cities") +
ylab("Average Housing Costs")
citygraph
ggsave("citygraph.png",citygraph )
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
setwd("../..")
setwd("551/WineVision-R-group8")
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
?sym
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/reports/CARTS.R', echo=TRUE)
app = Dash$new(external_stylesheets = dbcThemes$BOOTSTRAP)
source('~/Documents/Masters/block5/551/WineVision-R-group8/reports/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/reports/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/reports/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
wine <- read.csv("data/processed/wine_quality.csv")
wine
wine$Quality.Factor <- as.factor(wine$Quality.Factor)
wine
wine.tree <- c(wine[1:12], wine[14])
wine.tree
wine.tree <- cbind(wine[1:12], wine[14])
wine.tree
wine.tree.data <- cbind(wine[1:12], wine[14])
wine.tree <- tree(Quality.Factor~., data = wine.tree.data)
plot(wine.tree)
text(wine.tree)
View(wine.tree.data)
wine.tree <- tree(Quality.Factor~., data = wine.tree.data)
View(wine)
wine.tree.data <- cbind(wine[2:12], wine[14])
wine.tree <- tree(Quality.Factor~., data = wine.tree.data)
plot(wine.tree)
text(wine.tree)
wine.tree <- tree(Quality.Factor~., data = wine.tree.data)
plot(wine.tree)
text(wine.tree)
View(wine.tree.data)
colnames(wine.tree.data)
wine.tree <- tree(Quality.Factor~ Free.Sulfur.Dioxide..mg.dm.3. + Density..g.cm.3.,
data = wine.tree.data)
plot(wine.tree)
text(wine.tree)
wine.tree <- tree(Quality.Factor~ Free.Sulfur.Dioxide..mg.dm.3. +
Density..g.cm.3. + Residual.Sugar..g.dm.3.,
data = wine.tree.data)
plot(wine.tree)
text(wine.tree)
wine.tree <- tree(Quality.Factor~ Free.Sulfur.Dioxide..mg.dm.3. +
Density..g.cm.3. + Residual.Sugar..g.dm.3.,
data = wine.tree.data)
plot(wine.tree) + text(wine.tree)
wine.tree <- tree(Quality.Factor~ Free.Sulfur.Dioxide..mg.dm.3. +
Density..g.cm.3. + Residual.Sugar..g.dm.3.,
data = wine.tree.data)
plot(wine.tree)
text(wine.tree)
library(tree)
wine$Quality.Factor <- as.factor(wine$Quality.Factor)
wine$Wine <- as.factor(wine$Wine)
wine.tree.data <- cbind(wine[1:12], wine[14])
wine.tree <- tree(Quality.Factor~ Free.Sulfur.Dioxide..mg.dm.3. +
Density..g.cm.3. + Residual.Sugar..g.dm.3.,
data = wine.tree.data)
plot(wine.tree)
text(wine.tree)
wine.tree <- tree(Quality.Factor~ Wine +
Density..g.cm.3. + Residual.Sugar..g.dm.3.,
data = wine.tree.data)
plot(wine.tree)
text(wine.tree)
wine.tree <- tree(Quality.Factor~ .,
data = wine.tree.data)
plot(wine.tree)
text(wine.tree)
wine.tree <- tree(Quality.Factor~ Wine,
data = wine.tree.data)
plot(wine.tree)
colnames(wine)
wine.tree <- tree(Quality.Factor~ Wine + Sulphates..g.dm.3.,
data = wine.tree.data)
plot(wine.tree)
wine.tree <- tree(Quality.Factor~ Wine + Sulphates..g.dm.3. + pH,
data = wine.tree.data)
plot(wine.tree)
wine.tree <- tree(Quality.Factor~ Wine + Sulphates..g.dm.3. + pH + Alcohol....,
data = wine.tree.data)
plot(wine.tree)
text(wine.tree)
wine.tree <- tree(Quality.Factor~ Wine,
data = wine.tree.data)
plot(wine.tree)
View(wine.tree)
typeof(wine.tree)
View(wine.tree)
wine.tree$frame$splits
wine.tree$frame$splits == ""
wine.tree$frame$splits[1]
wine.tree$frame$splits[1] == ""
wine.tree <- tree(Quality.Factor~ Wine,
data = wine.tree.data)
if(wine.tree$frame$splits[1] == ""){
print("Insufficient predictive power from these variables to build tree")
}
else{
wine.tree <- tree(Quality.Factor~ Wine,
data = wine.tree.data)
if(wine.tree$frame$splits[1] == ""){
print("Insufficient predictive power from these variables to build tree")
}
else{
wine.tree <- tree(Quality.Factor~ Wine,
data = wine.tree.data)
if(wine.tree$frame$splits[1] == ""){
print("Insufficient predictive power from these variables to build tree")
}
else {
wine.tree <- tree(Quality.Factor~ Wine,
data = wine.tree.data)
if(wine.tree$frame$splits[1] == ""){
print("Insufficient predictive power from these variables to build tree")
} else {
plot(wine.tree)
text(wine.tree)
}
colnames(wine)
wine.tree <- tree(Quality.Factor~ c(Wine, Alcohol...., Chlorides..g.dm.3.),
data = wine.tree.data)
wine.tree <- tree(Quality.Factor~ "Wine" + "Alcohol...."+ "Chlorides..g.dm.3.",
data = wine.tree.data)
wine.tree <- tree(Quality.Factor~ Wine + Alcohol....+ Chlorides..g.dm.3.,
data = wine.tree.data)
if(wine.tree$frame$splits[1] == ""){
print("Insufficient predictive power from these variables to build tree")
} else {
plot(wine.tree)
text(wine.tree)
}
wine.tree <- tree(Quality.Factor~ Wine * Alcohol....* Chlorides..g.dm.3.,
data = wine.tree.data)
wine.tree <- tree(Quality.Factor~ Wine + Alcohol....+ Chlorides..g.dm.3.,
data = wine.tree.data)
if(wine.tree$frame$splits[1] == ""){
print("Insufficient predictive power from these variables to build tree")
} else {
plot(wine.tree)
text(wine.tree)
}
wine
wine[Wine]
wine["Wine"]
wine[c("Wine", "Quality.Factor.Numeric", "Total.Sulfur.Dioxide..mg.dm.3."]
wine[c("Wine", "Quality.Factor.Numeric", "Total.Sulfur.Dioxide..mg.dm.3.")]
resp <- as.factor(wine$Quality.Factor)
colnames(wine)[2:6]
tree.variables <- colnames(wine)[2:6]
preds <- wine[tree.variables]
winex <- cbind(as.factor(wine$Quality.Factor), preds)
wine.tree <- tree(Quality.Factor~., data = winex)
View(winex)
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
View(winex)
wine.tree <- tree(Quality.Factor~., data = winex)
plot(wine.tree)
text(wine.tree)
x <- plot(wine.tree); text(wine.tree)
x
plot(x)
plot(wine.tree); text(wine.tree)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
variables
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
plot(wine.tree); text(wine.tree)
plot(wine.tree); text(wine.tree)
plotly(plot(wine.tree); text(wine.tree))
plotly(plot(wine.tree))
plot(wine.tree); text(wine.tree)
x <- function(tree){
plot(tree); text(tree)
}
x(wine.tree)
png(x(wine.tree))
x <- function(tree){
plot(tree); text(tree)
}
png("tree.png")
x(wine.tree)
dev.off()
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
install.packages("R3port")
x(wine.tree)
library(R3port)
html_plot(x(wine.tree))
x <- function(tree){
plot(tree); text(tree)
}
html_plot(x(wine.tree), out = "tree.html")
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
summary(wine)
x <- summary(wine)
x
x <- as.data.frame(summary(wine))
View(x)
summary(wine)
plotly(summary(wine))
library(plotly)
summary(wine)
as.data.frame(summary(wine))
View(wine)
winetable <- wine[2:12]
as.data.frame(summary(winetable))
as.data.frame(summary(wine))
winetable
winetable <- wine[2:12]
as.data.frame(summary(winetable))
as.data.frame(summary(winetable))[2:]
as.data.frame(summary(winetable))[2:,]
as.data.frame(summary(winetable))
winetable <- as.data.frame(summary(winetable))
winetable[c(2,3)]
spread(winetable, key = Var2, value = Freq)
?separate
winetable
separate(winetable, Freq, into = c("Statistic", "Value"))
winetable
separate(winetable, Freq, into = c("Statistic", "Value"), sep = ":")
winetable <-
spread(winetable, key = c(Var2, Statistic), value = Value)
winetable
winetable <- separate(winetable, Freq, into = c("Statistic", "Value"), sep = ":")
winetable
winetable <-
spread(winetable, key = c(Var2, Statistic), value = Value)
winetable <-
spread(winetable, key = Var2, value = Value)
winetable <-
spread(winetable, key = Var2, value = Value)
View(winetable)
winetable <- wine[2:12]
winetable <- as.data.frame(summary(winetable))
winetable
# Remove empty first column
winetable <- winetable[c(2,3)]
winetable <- separate(winetable, Freq, into = c("Statistic", "Value"), sep = ":")
winetable
spread(winetable, key = Var2, value = Value)
winetable
spread(winetable, key = Statistic, value = Value)
winetable <- rename(winetable, Variable = Var2)
winetable <- rename(winetable,  Var2 = Variable)
winetable <- winetable %>% rename(Variable = Var2)
winetable
names(winetable)
names(winetable)[1] <- "Variables"
winetable
winetable <- wine[2:12]
winetable <- as.data.frame(summary(winetable))
# Remove empty first column
winetable <- winetable[c(2,3)]
winetable <- separate(winetable, Freq, into = c("Statistic", "Value"), sep = ":")
winetable <- spread(winetable, key = Statistic, value = Value)
names(winetable)[1] <- "Variables"
winetable
write.csv(winetable, "summarystats.csv")
summarystats <- read.csv("reports/summarystats.csv")
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/testing.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
colnames(wine)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
# Create tree object using chosen predictors
wine.tree <- tree(Quality.Factor~., data = winex)
plottree(wine.tree)
plottree <- function(tree){
plot(tree)
text(tree)
}
plottree(wine.tree)
png(filename = "tree.png", width = 500, height = 500)
plottree(wine.tree)
dev.off()
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
?htmlImg
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
png(filename = "/assets/tree.png", width = 500, height = 500)
plottree(wine.tree)
png(filename = "/assets/tree.png", width = 500, height = 500)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
tree.variables <- wine[2:12]
View(wine)
View(tree.variables)
# Create subset df using only Quality.Factor and our chosen predictor variables
preds <- wine[tree.variables]
preds <- wine[2:12]
Quality.Factor <- as.factor(wine$Quality.Factor)
winex <- cbind(Quality.Factor, preds)
# Create tree object using chosen predictors
wine.tree <- tree(Quality.Factor~., data = winex)
plottree(wine.tree)
png(filename = "/assets/tree.png", width = 500, height = 500)
png(filename = "tree.png", width = 500, height = 500)
plottree(wine.tree)
dev.off()
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
colnames(wine)
source('~/Documents/Masters/block5/551/WineVision-R-group8/CARTS.R', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
prediction_layout <- htmlDiv(
list(
Header_banner,
htmlDiv(
list(
htmlBr(),
dbcContainer(
dbcRow(
dbcCol(list( # Variable selection
htmlH5("Physiochemical Properties"),
dccDropdown(id = "variables",
options = colnames(wine)[2:12] %>% purrr::map(function(col) list(label = col, value = which(colnames(wine)==col))),
value = c(3,9,12),
multi = T),
htmlH5("Wine Type"),
dccRadioItems(id = "winetype",
options = list(
list("label" = "White Wines", "value" = "white"),
list("label" = "Red Wines", "value" = "red")
),
value="red"
),
htmlImg(
id = "treepng", src = "/assets/tree.png", width = "100%", height = "600px"
)
))
)
)))))
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
source('~/Documents/Masters/block5/551/WineVision-R-group8/app.r', encoding = 'UTF-8', echo=TRUE)
